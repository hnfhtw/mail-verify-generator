[comment encoding = UTF-8 /]
[module attributes('http://www.eclipse.org/uml2/5.0.0/UML')]

[import at::fhv::mail_verify::generator::java::utils::common /]
[import at::fhv::mail_verify::generator::java::utils::declaration /]
[import at::fhv::mail_verify::generator::java::utils::type /]
[import at::fhv::mail_verify::generator::java::utils::request /]

[**
 * Generate the attributes for an interface
 * @param anInterface The interface for which the attributes should be generated
*/]
[template public genAttributes(anInterface : Interface) ]
[for (aProperty : Property | anInterface.ownedAttribute)]
[aProperty.genAttributeComment()/]
[aProperty.genVisibility()/][aProperty.genFinal()/][aProperty.genStatic()/][aProperty.genType()/] [aProperty.genName()/][aProperty.genDefaultValue()/];

[/for]
// [protected ('(user defined attributes)')]

// [/protected]

[/template]

[**
 * Generate the attributes for a class
 * @param aClass The class for which the attributes should be generated
*/]
[template public genAttributes(aClass : Class)]
[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
[aProperty.genAttributeComment()/]
[aProperty.genVisibility()/][aProperty.genFinal()/][aProperty.genStatic()/][aProperty.genType()/] [aProperty.genName()/][aProperty.genDefaultValue()/];

[/for]
// [protected ('(user defined attributes)')]

// [/protected]

[/template]

[**
 * Generate the comments for a property
 * @param aProperty The property for which the comments should be generated
*/]
[template public genAttributeComment(aProperty : Property)]
/**
[if (aProperty.ownedComment->size() > 0 and aProperty.ownedComment._body->forAll(b : String | not ''.equalsIgnoreCase(b)))]
[for (propertyComment : Comment | aProperty.ownedComment)]
 * [propertyComment._body/]
[/for]
[else]
 * Description of the property [aProperty.genName()/].
[/if]
 */
[/template]

[**
 * Generate the accessors for properties
 * @param aClass The class for which the accessors should be generated
*/]
[template public genAccessors(aClass : Class)]
[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
	[aProperty.genAccessors()/]
[/for]
[/template]

[**
 * Generate the accessors for a property
 * @param aProperty The property for which the accessors should be generated
*/]
[template private genAccessors(aProperty : Property)]
public [if (aProperty.isStatic)]static [/if][aProperty.genType()/] get[aProperty.genName().toUpperFirst()/](){
   return [if (not aProperty.isStatic)]this.[/if][aProperty.genName()/];
}
[if (not aProperty.isLeaf)]

public [if (aProperty.isStatic)]static [/if]void set[aProperty.genName().toUpperFirst()/]([aProperty.genType()/] [aProperty.genName()/]){
   [if (not aProperty.isStatic)]this.[/if][aProperty.genName()/] = [aProperty.genName()/];
}
[/if]
[/template]

